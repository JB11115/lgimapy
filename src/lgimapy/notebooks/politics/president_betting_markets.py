import pandas as pd

from lgimapy import vis
from lgimapy.utils import root

vis.style()

# %%


def get_pi_df():
    data_dir = root("data/politics/")
    pi_fids = list(data_dir.glob("*predictit_RAW*"))
    raw_df = pd.concat(
        (pd.read_csv(fid) for fid in pi_fids), axis=0
    ).drop_duplicates(keep="last")
    names = ["Trump", "Biden"]
    raw_df["date"] = pd.to_datetime(raw_df["Date"])
    stacked_df = raw_df[raw_df["ContractName"].isin(names)].set_index("date")
    df = pd.concat(
        (
            stacked_df[stacked_df["ContractName"] == name][
                "CloseSharePrice"
            ].rename(name)
            for name in names
        ),
        axis=1,
    )
    for name in names:
        df[name] = [float(val[1:]) for val in df[name]]
    df.columns = [f"Onshore {name}" for name in names]
    return df.divide(df.sum(axis=1), axis=0).rename_axis(None)


def get_rcp_df():
    df = pd.DataFrame(
        (
            ("6/6/2020", 50.1, 45.3),
            ("6/7/2020", 51.4, 44.3),
            ("6/8/2020", 51.4, 45.3),
            ("6/9/2020", 51.6, 44),
            ("6/10/2020", 52.3, 43.4),
            ("6/11/2020", 52.4, 43.9),
            ("6/12/2020", 52.6, 43.3),
            ("6/13/2020", 52.6, 43.1),
            ("6/14/2020", 53, 42.8),
            ("6/15/2020", 51.3, 42),
            ("6/16/2020", 51.6, 41.9),
            ("6/17/2020", 51.2, 42),
            ("6/18/2020", 52.3, 41),
            ("6/19/2020", 52.4, 40.9),
            ("6/20/2020", 54.1, 39.5),
            ("6/21/2020", 54.1, 39.4),
            ("6/22/2020", 54.7, 39.1),
            ("6/23/2020", 58.1, 38),
            ("6/24/2020", 58.8, 37.9),
            ("6/25/2020", 58.9, 37.3),
            ("6/26/2020", 59.1, 37.1),
            ("6/27/2020", 59.1, 36.6),
            ("6/28/2020", 58.6, 36.6),
            ("6/29/2020", 59.4, 36.3),
            ("6/30/2020", 59.1, 36.4),
            ("7/1/2020", 59, 36.6),
            ("7/2/2020", 59, 36.6),
            ("7/3/2020", 58.7, 37.3),
            ("7/4/2020", 57.3, 38.3),
            ("7/5/2020", 56.5, 39.3),
            ("7/6/2020", 56.3, 39.3),
            ("7/7/2020", 57, 38.7),
            ("7/8/2020", 57.6, 38.5),
            ("7/9/2020", 58.1, 38.1),
            ("7/10/2020", 57.6, 38.3),
            ("7/11/2020", 57.9, 38.3),
            ("7/12/2020", 58.3, 38),
            ("7/13/2020", 58.6, 37.6),
            ("7/14/2020", 59, 37),
            ("7/15/2020", 59.4, 36.9),
            ("7/16/2020", 59.4, 36.9),
            ("7/17/2020", 59.6, 36.7),
            ("7/18/2020", 59.9, 36.3),
            ("7/19/2020", 60.4, 36),
            ("7/20/2020", 60.3, 36.1),
            ("7/21/2020", 60.1, 36.1),
            ("7/22/2020", 60.7, 36.4),
            ("7/23/2020", 60.7, 36.3),
            ("7/24/2020", 60.7, 36.4),
            ("7/25/2020", 60.7, 36.4),
            ("7/26/2020", 60.6, 36.5),
            ("7/27/2020", 60.9, 36.6),
            ("7/28/2020", 60.7, 37),
            ("7/29/2020", 60.9, 37),
            ("7/30/2020", 61, 36.9),
            ("7/31/2020", 61, 36.4),
            ("8/1/2020", 60.7, 36.7),
            ("8/2/2020", 60.9, 36.6),
            ("8/3/2020", 60.9, 36.9),
            ("8/4/2020", 60.9, 36.9),
            ("8/5/2020", 60, 37.7),
            ("8/6/2020", 59.7, 37.9),
            ("8/7/2020", 59.3, 38.7),
            ("8/8/2020", 58.9, 39),
            ("8/9/2020", 58.7, 39.1),
            ("8/10/2020", 58.6, 39),
            ("8/11/2020", 58.4, 39),
            ("8/12/2020", 58.3, 39.4),
            ("8/13/2020", 58.1, 39.9),
            ("8/14/2020", 57.9, 40.1),
            ("8/15/2020", 56.6, 41.6),
            ("8/16/2020", 56.9, 41.7),
            ("8/17/2020", 56.9, 42.3),
            ("8/18/2020", 56.6, 42.1),
            ("8/19/2020", 56.7, 42.5),
            ("8/20/2020", 56.4, 42.7),
            ("8/21/2020", 55.6, 42.3),
            ("8/22/2020", 55.7, 43.4),
            ("8/23/2020", 55.3, 43.7),
            ("8/24/2020", 55, 44.1),
            ("8/25/2020", 54.5, 45.1),
            ("8/26/2020", 53.7, 46.3),
            ("8/27/2020", 53, 46.5),
            ("8/28/2020", 51.8, 47.8),
            ("8/29/2020", 50.6, 48.7),
            ("8/30/2020", 50.5, 48.5),
            ("8/31/2020", 50.2, 49.7),
            ("9/1/2020", 50, 49.5),
            ("9/2/2020", 50.6, 48.9),
            ("9/3/2020", 50.5, 48.8),
            ("9/4/2020", 50.4, 49),
            ("9/5/2020", 51.5, 47.8),
            ("9/6/2020", 53.8, 45.5),
            ("9/7/2020", 53, 46.9),
            ("9/8/2020", 53.2, 46.3),
            ("9/9/2020", 53, 46.3),
            ("9/10/2020", 53, 46.4),
            ("9/11/2020", 53, 46),
            ("9/12/2020", 52.8, 46.3),
            ("9/13/2020", 52.5, 46.8),
            ("9/14/2020", 52.7, 46.7),
            ("9/15/2020", 52.5, 46.8),
            ("9/16/2020", 52.3, 47),
            ("9/17/2020", 53.9, 45.4),
            ("9/18/2020", 53.1, 46.4),
            ("9/19/2020", 53.1, 46.3),
            ("9/20/2020", 53.4, 45.9),
            ("9/21/2020", 53.9, 45.3),
            ("9/22/2020", 53.3, 46.3),
            ("9/23/2020", 53.5, 45.6),
            ("9/24/2020", 53.7, 45.6),
            ("9/25/2020", 53.1, 46.4),
            ("9/26/2020", 54.1, 45.5),
            ("9/27/2020", 54.8, 44.3),
            ("9/28/2020", 54.5, 45),
            ("9/29/2020", 59.8, 40.8),
            ("9/30/2020", 61.3, 39.3),
            ("10/1/2020", 61, 37.5),
        ),
        columns=["date", "Offshore Biden", "Offshore Trump"],
    )
    df = df.set_index("date").rename_axis(None) / 100
    df.index = pd.to_datetime(df.index)
    return df.divide(df.sum(axis=1), axis=0)


pi_df = get_pi_df()
rcp_df = get_rcp_df()
df = pd.concat((pi_df, rcp_df), axis=1).fillna(method="ffill")
# %%

fig, ax = vis.subplots(figsize=(10, 6))
ax.axhline(0.5, c="k", lw=1, label="_nolegend_")
for color, name in zip(["navy", "firebrick"], ["Biden", "Trump"]):
    for ls, shore in zip(["-", ":"], ["Onshore", "Offshore"]):
        s = df[f"{shore} {name}"]
        lbl = f"{shore} {name} ({s.iloc[-1]:.1%})"
        vis.plot_timeseries(s, color=color, ls=ls, alpha=0.7, label=lbl, ax=ax)

vis.format_yaxis(ax, ytickfmt="{x:.0%}")
ax.set_title("Election Betting Odds\n\n", fontweight="bold")
ax.legend(
    loc="center", bbox_to_anchor=(0.5, 1.07), ncol=2, shadow=True, fancybox=True
)
vis.savefig("election_betting_odds")
